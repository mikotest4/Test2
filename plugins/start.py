import asyncio
import shutil
import humanize
import time
import datetime
from time import sleep
from config import Config
from script import Txt
from helper.database import db
from helper_func import is_user_verified, create_verification_link, get_exp_time
from pyrogram.errors import FloodWait, MessageNotModified
from pyrogram import Client, filters, enums
from .check_user_status import handle_user_status
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

@Client.on_message((filters.private | filters.group))
async def _(bot: Client, cmd: Message):
    await handle_user_status(bot, cmd)

@Client.on_message((filters.private | filters.group) & filters.command('start'))
async def Handle_StartMsg(bot: Client, msg: Message):
    user_id = msg.from_user.id
    
    # Handle verification callback
    if len(msg.text) > 7 and "verify_" in msg.text:
        try:
            _, token = msg.text.split("verify_", 1)
            verify_status = await db.get_verify_status(user_id)
            
            if verify_status['verify_token'] != token:
                return await msg.reply_text(
                    "‚ùå **Invalid Token**\n\n"
                    "Your verification token is invalid or expired.\n"
                    "Please send a file to get a new verification link.",
                    quote=True
                )
            
            # Mark as verified
            await db.update_verify_status(user_id, is_verified=True, verified_time=time.time())
            
            return await msg.reply_text(
                f"‚úÖ **Verification Successful!**\n\n"
                f"Your token has been verified and is valid for **{get_exp_time(Config.VERIFY_EXPIRE)}**.\n\n"
                f"üé¨ You can now send video files to encode them in groups!",
                quote=True
            )
        except Exception as e:
            print(f"Verification error: {e}")
            pass

    try:
        Snowdev = await msg.reply_text(text='**Please Wait...**', reply_to_message_id=msg.id)
    except FloodWait as e:
        await asyncio.sleep(e.value)
        Snowdev = await msg.reply_text(text='**Please Wait...**', reply_to_message_id=msg.id)
    except Exception as e:
        print(f"Error sending initial message: {e}")
        return

    if msg.chat.type == enums.ChatType.SUPERGROUP and not await db.is_user_exist(msg.from_user.id):
        botusername = await bot.get_me()
        btn = [
            [InlineKeyboardButton(text='‚ö° BOT PM', url=f'https://t.me/{botusername.username}')],
            [InlineKeyboardButton(text='üíª D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä', url='https://t.me/+6LwHBLWZc3IyMTU1')]
        ]
        try:
            await Snowdev.edit(text=Txt.GROUP_START_MSG.format(msg.from_user.mention), reply_markup=InlineKeyboardMarkup(btn))
        except (FloodWait, MessageNotModified) as e:
            if isinstance(e, FloodWait):
                await asyncio.sleep(e.value)
                try:
                    await Snowdev.edit(text=Txt.GROUP_START_MSG.format(msg.from_user.mention), reply_markup=InlineKeyboardMarkup(btn))
                except MessageNotModified:
                    pass
        except Exception as e:
            print(f"Error editing group start message: {e}")
    else:
        # Check if user is premium and show premium indicator
        is_premium = await db.is_premium_user(user_id)
        is_admin = user_id == Config.ADMIN
        
        if is_admin:
            status_text = "üë®‚Äçüíº **ADMIN USER** - Full Access Everywhere"
        elif is_premium:
            status_text = "üëë **PREMIUM USER** - Group Access (No Verification)"
        else:
            status_text = "üë§ **REGULAR USER** - Group Access (Verification Required)"
        
        btn = [
            [InlineKeyboardButton(text='‚ùó H·¥á ü·¥ò', callback_data='help'), InlineKeyboardButton(text='üå®Ô∏è A ô·¥è·¥ú·¥õ', callback_data='about')],
            [InlineKeyboardButton(text='üì¢ U·¥ò·¥Ö·¥Ä·¥õ·¥ás', url='https://t.me/+6LwHBLWZc3IyMTU1'), InlineKeyboardButton(text='üíª D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä', url='https://t.me/+6LwHBLWZc3IyMTU1')]
        ]

        start_text = f"{status_text}\n\n{Txt.PRIVATE_START_MSG.format(msg.from_user.mention)}"

        try:
            if Config.START_PIC:
                await Snowdev.delete()
                await msg.reply_photo(photo=Config.START_PIC, caption=start_text, reply_markup=InlineKeyboardMarkup(btn), reply_to_message_id=msg.id)
            else:
                await Snowdev.delete()
                await msg.reply_text(text=start_text, reply_markup=InlineKeyboardMarkup(btn), reply_to_message_id=msg.id)
        except FloodWait as e:
            await asyncio.sleep(e.value)
            try:
                if Config.START_PIC:
                    await Snowdev.delete()
                    await msg.reply_photo(photo=Config.START_PIC, caption=start_text, reply_markup=InlineKeyboardMarkup(btn), reply_to_message_id=msg.id)
                else:
                    await Snowdev.delete()
                    await msg.reply_text(text=start_text, reply_markup=InlineKeyboardMarkup(btn), reply_to_message_id=msg.id)
            except Exception as e:
                print(f"Error after FloodWait retry: {e}")
        except Exception as e:
            print(f"Error sending start message: {e}")

@Client.on_message((filters.private | filters.group) & (filters.document | filters.audio | filters.video) & ~filters.sticker & ~filters.animation)
async def Files_Option(bot: Client, message: Message):
    user_id = message.from_user.id
    chat_type = message.chat.type
    
    # Check if it's a group and bot should reply
    is_in_group = chat_type in [enums.ChatType.SUPERGROUP, enums.ChatType.GROUP]
    
    try:
        if is_in_group:
            # In group: Reply to the message
            SnowDev = await message.reply_text(text='**ü§ñ Bot Detected File - Processing...**', reply_to_message_id=message.id)
        else:
            # In DM: Send normal message
            SnowDev = await message.reply_text(text='**Please Wait**', reply_to_message_id=message.id)
    except FloodWait as e:
        await asyncio.sleep(e.value)
        if is_in_group:
            SnowDev = await message.reply_text(text='**ü§ñ Bot Detected File - Processing...**', reply_to_message_id=message.id)
        else:
            SnowDev = await message.reply_text(text='**Please Wait**', reply_to_message_id=message.id)
    except Exception as e:
        print(f"Error sending file detection message: {e}")
        return

    # Check if user is admin
    is_admin = user_id == Config.ADMIN
    is_premium = await db.is_premium_user(user_id)

    # New restriction logic - Only admin can encode in DM
    if not is_admin and not is_in_group:
        access_level = "üëë Premium User" if is_premium else "üë§ Regular User"
        
        restriction_text = (
            f"** è·¥è·¥ú ·¥Ñ·¥Ä…¥'·¥õ ·¥ús·¥á ·¥ç·¥á …™…¥ ·¥Ö·¥ç  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥ç·¥á  ú·¥á Ä·¥á ·¥ä·¥è…™…¥ ·¥Ä…¥·¥Ö ·¥ús·¥á :- **")
        
        try:
            return await SnowDev.edit(restriction_text)
        except (FloodWait, MessageNotModified) as e:
            if isinstance(e, FloodWait):
                await asyncio.sleep(e.value)
                try:
                    return await SnowDev.edit(restriction_text)
                except MessageNotModified:
                    return
        except Exception as e:
            print(f"Error editing restriction message: {e}")
            return

    if message.chat.type == enums.ChatType.SUPERGROUP and not await db.is_user_exist(message.from_user.id):
        botusername = await bot.get_me()
        btn = [
            [InlineKeyboardButton(text='‚ö° BOT PM', url=f'https://t.me/{botusername.username}')],
            [InlineKeyboardButton(text='üíª D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä', url='https://t.me/+6LwHBLWZc3IyMTU1')]
        ]
        try:
            return await SnowDev.edit(text=Txt.GROUP_START_MSG.format(message.from_user.mention), reply_markup=InlineKeyboardMarkup(btn))
        except (FloodWait, MessageNotModified) as e:
            if isinstance(e, FloodWait):
                await asyncio.sleep(e.value)
                try:
                    return await SnowDev.edit(text=Txt.GROUP_START_MSG.format(message.from_user.mention), reply_markup=InlineKeyboardMarkup(btn))
                except MessageNotModified:
                    return
        except Exception as e:
            print(f"Error editing group message: {e}")
            return

    # Verification check - Admin bypass, Premium bypass, Regular users need verification
    if not is_admin and not is_premium:
        if not await is_user_verified(user_id, db):
            try:
                botusername = (await bot.get_me()).username
                verification_link = await create_verification_link(user_id, botusername, db)
                
                btn = [
                    [InlineKeyboardButton("·¥†·¥á Ä…™“ì è …¥·¥è·¥°", url=verification_link)],
                    [InlineKeyboardButton('·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü', url=Config.TUT_VID)]
                ]
                
                verification_text = (
    f"üîí **·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö**\n\n"
    f" è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è ·¥†·¥á Ä…™“ì è  è·¥è·¥ú Äs·¥á ü“ì  ô·¥á“ì·¥è Ä·¥á ·¥á…¥·¥Ñ·¥è·¥Ö…™…¥…¢ ·¥†…™·¥Ö·¥á·¥ès …™…¥ …¢ Ä·¥è·¥ú·¥òs.\n\n"
    f"‚è±Ô∏è **·¥õ·¥è·¥ã·¥á…¥ ·¥†·¥Ä ü…™·¥Ö…™·¥õ è:** {get_exp_time(Config.VERIFY_EXPIRE)}\n\n"
    f"** ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è:**\n"
    f"1. ·¥Ñ ü…™·¥Ñ·¥ã 'üîó ·¥†·¥á Ä…™“ì è …¥·¥è·¥°'  ô·¥ú·¥õ·¥õ·¥è…¥\n"
    f"2. ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á ·¥õ ú·¥á ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥ò Ä·¥è·¥Ñ·¥áss\n"
    f"3.  Ä·¥á·¥õ·¥ú Ä…¥ ·¥õ·¥è  ô·¥è·¥õ ·¥Ä…¥·¥Ö s·¥á…¥·¥Ö /start\n"
    f"4. s·¥á…¥·¥Ö  è·¥è·¥ú Ä “ì…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥\n\n"
    f"**…¥·¥è·¥õ·¥á:** ·¥õ ú…™s  ú·¥á ü·¥òs s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ ú Ä·¥è·¥ú…¢ ú ·¥Ä·¥Ös.\n\n"
    f"üí° **…¢·¥á·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥õ·¥è s·¥ã…™·¥ò ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥!**"
)

                
                try:
                    return await SnowDev.edit(
                        text=verification_text,
                        reply_markup=InlineKeyboardMarkup(btn)
                    )
                except (FloodWait, MessageNotModified) as e:
                    if isinstance(e, FloodWait):
                        await asyncio.sleep(e.value)
                        try:
                            return await SnowDev.edit(
                                text=verification_text,
                                reply_markup=InlineKeyboardMarkup(btn)
                            )
                        except MessageNotModified:
                            return
                except Exception as e:
    print(f"‚ùå ·¥á Ä Ä·¥è Ä ·¥á·¥Ö…™·¥õ…™…¥…¢ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥ç·¥áss·¥Ä…¢·¥á: {e}")
    return
except Exception as e:
    print(f"‚ùå ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥  ü…™…¥·¥ã ·¥Ñ Ä·¥á·¥Ä·¥õ…™·¥è…¥ “ì·¥Ä…™ ü·¥á·¥Ö: {e}")
    try:
        return await SnowDev.edit("‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥  ü…™…¥·¥ã. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.")
    except (FloodWait, MessageNotModified) as e:
        if isinstance(e, FloodWait):
            await asyncio.sleep(e.value)
            try:
                return await SnowDev.edit("‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥á ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥  ü…™…¥·¥ã. ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.")
            except MessageNotModified:
                return
    except Exception as e:
        print(f"‚ùå ·¥á Ä Ä·¥è Ä ·¥á·¥Ö…™·¥õ…™…¥…¢ ·¥á Ä Ä·¥è Ä ·¥ç·¥áss·¥Ä…¢·¥á: {e}")
        return
        
    file = getattr(message, message.media.value)
    filename = file.file_name
    filesize = humanize.naturalsize(file.file_size)
    
    # Enhanced access level display
    if is_admin:
    access_level = "·¥Ä·¥Ö·¥ç…™…¥ (“ì·¥ú ü ü ·¥Ä·¥Ñ·¥Ñ·¥áss)"
elif is_premium:
    access_level = "·¥ò Ä·¥á·¥ç…™·¥ú·¥ç (…¥·¥è ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥)"
else:
    access_level = " Ä·¥á…¢·¥ú ü·¥Ä Ä (·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö)"        
    location = "üí¨ …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä·¥õ" if is_in_group else "üì± ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä·¥õ"
    
    try:
        # Different message format for groups vs DMs
        if is_in_group:
            file_info = f"**“ì…™ ü·¥á ·¥Ö·¥á·¥õ·¥á·¥Ñ·¥õ·¥á·¥Ö &  Ä·¥á·¥Ä·¥Ö è “ì·¥è Ä ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢
            **\n\n**“ì…™ ü·¥á …¥·¥Ä·¥ç·¥á:** `{filename}`\n**“ì…™ ü·¥á s…™·¥¢·¥á:** `{filesize}`\n**·¥ús·¥á Ä:** {message.from_user.mention}\n**·¥Ä·¥Ñ·¥Ñ·¥áss  ü·¥á·¥†·¥á ü:** {access_level}\n** ü·¥è·¥Ñ·¥Ä·¥õ…™·¥è…¥:** {location}"
        else:
            file_info = f"**“ì…™ ü·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥**\n\n**“ì…™ ü·¥á …¥·¥Ä·¥ç·¥á:** `{filename}`\n**“ì…™ ü·¥á s…™·¥¢·¥á:** `{filesize}`\n**·¥Ä·¥Ñ·¥Ñ·¥áss  ü·¥á·¥†·¥á ü:** {access_level}\n** ü·¥è·¥Ñ·¥Ä·¥õ…™·¥è…¥:** {location}"
        
        btn = [[InlineKeyboardButton("·¥° ú·¥Ä·¥õ ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥è ·¥°…™·¥õ ú ·¥õ ú…™s “ì…™ ü·¥á?
        ", callback_data="option")]]
        
        try:
            await SnowDev.edit(text=file_info, reply_markup=InlineKeyboardMarkup(btn))
        except (FloodWait, MessageNotModified) as e:
            if isinstance(e, FloodWait):
                await asyncio.sleep(e.value)
                try:
                    await SnowDev.edit(text=file_info, reply_markup=InlineKeyboardMarkup(btn))
                except MessageNotModified:
                    pass
        except Exception as e:
            print(f"·¥á Ä Ä·¥è Ä ·¥á·¥Ö…™·¥õ…™…¥…¢ “ì…™ ü·¥á …™…¥“ì·¥è ·¥ç·¥áss·¥Ä…¢·¥á:
            {e}")

    except Exception as e:
        print(f"Error in Files_Option: {e}")
        try:
            await SnowDev.edit("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢  è·¥è·¥ú Ä “ì…™ ü·¥á.")
        except (FloodWait, MessageNotModified) as e:
            if isinstance(e, FloodWait):
                await asyncio.sleep(e.value)
                try:
                    await SnowDev.edit("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢  è·¥è·¥ú Ä “ì…™ ü·¥á.")
                except MessageNotModified:
                    pass
        except Exception as e:
            print(f"Error editing error message: {e}")
